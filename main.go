package main

import (
	"database/sql"
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"io"
	"log"
	"math/rand"
	"net/http"
	"net/url"
	"os"
	"os/exec"
	"strings"
	"time"
	"vpn_bot_go/config"
	"vpn_bot_go/outline"
)

var (
	bot             *tgbotapi.BotAPI
	messages        Messages
	defaultKeyboard = getDefaultKeyboard()
)

func main() {
	var err error
	messages, err = loadMessages("messages.json")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
	}

	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	cfg, err := config.LoadConfig()
	if err != nil {
		log.Fatal(err)
	}

	bot, err = tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}
	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –∫–∞–∫ %s", bot.Self.UserName)

	db, err := InitDB("./user_actions.db")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer func(db *sql.DB) {
		err := db.Close()
		if err != nil {
			log.Fatal(err.Error())
		}
	}(db)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(update, cfg, db)
		}
	}
}

func handleMessage(update tgbotapi.Update, cfg *config.Config, db *sql.DB) {
	chatID := update.Message.Chat.ID
	userID := fmt.Sprintf("%d", update.Message.From.ID)
	userName := update.Message.From.UserName

	switch update.Message.Text {
	case "/start":
		sendMessage(chatID, messages.WelcomeMessage, defaultKeyboard)
		LogUserAction(update.Message.From.ID, update.Message.From.UserName, "Started /start command")
	case "OpenVPN":
		keyboard := tgbotapi.NewReplyKeyboard(
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã"),
				tgbotapi.NewKeyboardButton("üá∑üá∫ –†–æ—Å—Å–∏—è"),
			),
			tgbotapi.NewKeyboardButtonRow(
				tgbotapi.NewKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥"),
			),
		)
		sendMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è OpenVPN:", keyboard)
	case "Outline":
		handleOutline(chatID, userID, userName, cfg.Outline.Server, cfg.Outline.Token)
	case "TelegramProxy":
		sendMessage(chatID, messages.ButtonTelegramProxy, defaultKeyboard)
	case "HttpProxy":
		handleHttpProxy(chatID, cfg.HttpProxy)
	case "üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã":
		handleOpenvpnNl(chatID, userID, cfg.OpenVPN.Script, cfg.OpenVPN.Configs)
	case "üá∑üá∫ –†–æ—Å—Å–∏—è":
		handleOpenvpnRu(chatID, userID, cfg.RU.Server, cfg.RU.Secret)
	case "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
		sendMessage(chatID, "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", defaultKeyboard)
	default:
		sendMessage(chatID, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é.", defaultKeyboard)
	}
}

func handleOpenvpnNl(chatID int64, userID, scriptPath, configsPath string) {
	filePath, err := generateOpenVPNConfig(userID, scriptPath, configsPath)
	if err != nil {
		sendMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ OpenVPN: %v", err), defaultKeyboard)
		return
	}

	sendMessage(chatID, `–í–∞—à OpenVPN –∫–æ–Ω—Ñ–∏–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∫–∞—á–∞–π—Ç–µ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É OpenVPN

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è Windows/Mac/Linux/Iphone/Android: 
—Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è - openvpn.net/client/

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ñ–∏–≥–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
1. –ù–∞–∂–∞—Ç—å –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –§–∞–π–ª –Ω–∏–∂–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .ovpn 
2. –í—ã–±—Ä–∞—Ç—å –≤ –º–µ–Ω—é -> –æ—Ç–∫—Ä—ã—Ç—å —Å  –ø–æ–º–æ—â—å—é -> —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É OpenVPN

–ò–ª–∏ 
C–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É`, defaultKeyboard)

	if err := sendDocument(chatID, filePath); err != nil {
		sendMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: %v", err), defaultKeyboard)
	}
}

func handleHttpProxy(chatID int64, httpProxy []string) {
	randSeed := rand.New(rand.NewSource(time.Now().UnixNano()))
	randIndex := randSeed.Intn(len(httpProxy))
	randProxy := strings.Split(httpProxy[randIndex], ":")
	message := "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è http proxy \n–°–µ—Ä–≤–µ—Ä: cetus.shaneque.ru \n–ü–æ—Ä—Ç: 8443 \n–õ–æ–≥–∏–Ω: " + randProxy[0] + " \n–ü–∞—Ä–æ–ª—å: " + randProxy[1]
	sendMessage(chatID, message, defaultKeyboard)
}

func handleOpenvpnRu(chatID int64, userID, server, secret string) {
	params := url.Values{}
	params.Add("user_id", userID)

	client := &http.Client{Timeout: 10 * time.Second}
	req, err := http.NewRequest("GET", fmt.Sprintf("http://%s/get_config?%s", server, params.Encode()), nil)
	if err != nil {
		sendMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞: %v", err), defaultKeyboard)
		return
	}
	req.Header.Set("secret", secret)

	resp, err := client.Do(req)
	if err != nil {
		sendMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: %v", err), defaultKeyboard)
		return
	}
	defer resp.Body.Close()

	reader, err := io.ReadAll(resp.Body)
	if err != nil {
		sendMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞: %v", err), defaultKeyboard)
		return
	}

	fileName := fmt.Sprintf("RU_%s.ovpn", userID)
	if err := os.WriteFile(fileName, reader, 0644); err != nil {
		sendMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞: %v", err), defaultKeyboard)
		return
	}

	sendMessage(chatID, `–í–∞—à OpenVPN –∫–æ–Ω—Ñ–∏–≥ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∫–∞—á–∞–π—Ç–µ –æ–¥–Ω–æ–∏–º–µ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É OpenVPN

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è Windows/Mac/Linux/Iphone/Android: 
—Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è - openvpn.net/client/

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–æ–Ω—Ñ–∏–≥–æ–º, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
1. –ù–∞–∂–∞—Ç—å –Ω–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –§–∞–π–ª –Ω–∏–∂–µ —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º .ovpn 
2. –í—ã–±—Ä–∞—Ç—å –≤ –º–µ–Ω—é -> –æ—Ç–∫—Ä—ã—Ç—å —Å  –ø–æ–º–æ—â—å—é -> —É–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É OpenVPN

–ò–ª–∏ 
C–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–Ω–æ—Å–æ–º –≤ –ø—Ä–æ–≥—Ä–∞–º–º—É`, defaultKeyboard)

	if err := sendDocument(chatID, fileName); err != nil {
		sendMessage(chatID, fmt.Sprintf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: %v", err), defaultKeyboard)
	}
}

func handleOutline(chatID int64, userID, userName, OutlineServer, OutlineToken string) {

	link, err := outline.CheckUserExists(userID, userName, OutlineServer, OutlineToken)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Outline: %v", err)
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", defaultKeyboard)
		return
	}

	if link != "" {
		sendMessage(chatID, `–í–∞—à  –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É Outline Client

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è Windows/Mac/Linux/Iphone/Android: 
—Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è - getoutline.org/ru/get-started/

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º:
1. –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
2. –ö–æ–ø–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
3. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.
4. –ù–∞–∂–∏–º–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å - –ø–æ–ª—å–∑—É–µ–º—Å—è!`, defaultKeyboard)
		sendMessage(chatID, fmt.Sprintf("```%s```", link), defaultKeyboard)
		return
	}

	link, err = outline.CreateNewUser(userID, userName, OutlineServer, OutlineToken)
	if err != nil {
		log.Printf("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Outline: %v", err)
		sendMessage(chatID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", defaultKeyboard)
		return
	}

	if link != "" {
		sendMessage(chatID, `–í–∞—à  –∫–ª—é—á –¥–æ—Å—Ç—É–ø–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω. –î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –∏–º –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–∫–∞—á–∞–π—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É Outline Client

–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è Windows/Mac/Linux/Iphone/Android: 
—Å—Å—ã–ª–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è - getoutline.org/ru/get-started/

–î–ª—è —Ç–æ–≥–æ —á—Ç–æ –±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –∫–ª—é—á–æ–º:
1. –°–∫–∞—á–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
2. –ö–æ–ø–∏—Ä—É–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
3. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä.
4. –ù–∞–∂–∏–º–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å - –ø–æ–ª—å–∑—É–µ–º—Å—è!`, defaultKeyboard)
		sendMessage(chatID, fmt.Sprintf("```%s```", link), defaultKeyboard)
		return
	}

	//sendMessage(chatID, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.", defaultKeyboard)
}

func generateOpenVPNConfig(userID, scriptPath, configsPath string) (string, error) {
	cmd := exec.Command(scriptPath, "1", userID)
	if err := cmd.Run(); err != nil {
		return "", err
	}
	return fmt.Sprintf("%s/%s.ovpn", configsPath, userID), nil
}

func sendDocument(chatID int64, filePath string) error {
	file, err := os.Open(filePath)
	if err != nil {
		return err
	}
	defer file.Close()

	document := tgbotapi.NewDocument(chatID, tgbotapi.FileReader{
		Name:   filePath,
		Reader: file,
	})

	if _, err := bot.Send(document); err != nil {
		return err
	}
	return nil
}

func sendMessage(chatID int64, text string, keyboard tgbotapi.ReplyKeyboardMarkup) {
	msg := tgbotapi.NewMessage(chatID, text)
	msg.ReplyMarkup = keyboard
	if strings.Contains(text, "```") {
		msg.ParseMode = tgbotapi.ModeMarkdown
	}
	msg.DisableWebPagePreview = true
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %v", err)
	}
}

func getDefaultKeyboard() tgbotapi.ReplyKeyboardMarkup {
	return tgbotapi.NewReplyKeyboard(
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("OpenVPN"),
			tgbotapi.NewKeyboardButton("Outline"),
		),
		tgbotapi.NewKeyboardButtonRow(
			tgbotapi.NewKeyboardButton("TelegramProxy"),
			tgbotapi.NewKeyboardButton("HttpProxy"),
		),
	)
}
