package main

import (
	"database/sql"
	"fmt"
	"github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"log"
	"os"
)

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
	messages, err := loadMessages("messages.json")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: %v", err)
	}

	token := os.Getenv("TELEGRAM_BOT_TOKEN")
	if token == "" {
		log.Fatal("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
	}

	bot, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –∫–∞–∫ %s", bot.Self.UserName)

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
	db, err := InitDB("./user_actions.db")
	if err != nil {
		log.Fatalf("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: %v", err)
	}
	defer func(db *sql.DB) {
		err := db.Close()
		if err != nil {

		}
	}(db)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			welcomeMsg := fmt.Sprintf(messages.WelcomeMessage)
			msg := tgbotapi.NewMessage(update.Message.Chat.ID, welcomeMsg)

			// –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –¥–≤–∞ —Ä—è–¥–∞
			msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å OpenVPN config", "OpenVPN"),
					tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å TelegramProxy", "TelegramProxy"),
				),
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å Outline config", "Outline"),
					tgbotapi.NewInlineKeyboardButtonData("–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π HttpProxy", "HttpProxy"),
				),
			)

			_, err := bot.Send(msg)
			if err != nil {
				return
			}

			// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			LogUserAction(update.Message.From.ID, update.Message.From.UserName, "Started /start command")
		}

		if update.CallbackQuery != nil {
			var responseText string
			action := ""
			switch update.CallbackQuery.Data {
			case "OpenVPN":
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ "–ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã" –∏ "–†–æ—Å—Å–∏—è" –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å—Ç—Ä–æ–∫–∞—Ö
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω—É –¥–ª—è OpenVPN:")
				msg.ReplyMarkup = tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üá≥üá± –ù–∏–¥–µ—Ä–ª–∞–Ω–¥—ã", "OpenVPN_NL"),
					),
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("üá∑üá∫ –†–æ—Å—Å–∏—è", "OpenVPN_RU"),
					),
				)
				_, err := bot.Send(msg)
				if err != nil {
					return
				}
				action = "Requested OpenVPN config selection"
			case "Outline":
				responseText = messages.ButtonOutline
				action = "Requested Outline config"
			case "TelegramProxy":
				responseText = messages.ButtonTelegramProxy
				action = "Requested TelegramProxy config"
			case "HttpProxy":
				responseText = messages.ButtonHttpProxy
				action = "Requested HttpProxy config"
			case "OpenVPN_NL":
				// –¢–µ–∫—Å—Ç –∏–∑ messages.json –¥–ª—è –ù–∏–¥–µ—Ä–ª–∞–Ω–¥–æ–≤
				responseText = messages.ButtonopenvpnNl
				action = "Selected OpenVPN Netherlands"
			case "OpenVPN_RU":
				// –¢–µ–∫—Å—Ç –∏–∑ messages.json –¥–ª—è –†–æ—Å—Å–∏–∏
				responseText = messages.ButtonopenvpnRu
				action = "Selected OpenVPN Russia"
			default:
				responseText = messages.UnknownButton
				action = "Unknown button clicked"
			}

			// –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			LogUserAction(update.CallbackQuery.From.ID, update.CallbackQuery.From.UserName, action)

			if responseText != "" {
				// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ CallbackQuery –∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
				callback := tgbotapi.NewCallback(update.CallbackQuery.ID, responseText)
				if _, err := bot.Request(callback); err != nil {
					log.Println(err)
				}

				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, responseText)
				_, err := bot.Send(msg)
				if err != nil {
					return
				}
			}
		}
	}
}
